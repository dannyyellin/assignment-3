name: assignment3
on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: create log file
      run: echo $(date -Iminutes) >> log.txt
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        tags: meals-svc:danny-yellin
        outputs: type=docker,dest= /image.tar
    - name: update log file on success
      if: success()
      run: echo image successfully built >> log.txt
    - name: update log file on failure
      if: failure()
      run: echo image not built  >> log.txt
    - name: Upload meal-svc image
      uses: actions/upload-artifact@v3
      with:
        name: images
        path: /image.tar
    - name: Upload log file (always, even on build failure)
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: log.txt
        path: log.txt
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
#    # 1. download image and run it in a container
    - name: Download artifact
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Load Docker images from previous workflows
      run: docker load --input images/image.tar
    - name: check meal-svc:danny_yellin image is loaded
      run: docker image ls
    - name: run image in container
      run: docker run -d -p8000:8000 meal-svc:danny_yellin
    - name: Check container is running
      run: docker ps
#    # 2. set up python and pytest environment
#    - name: Checkout
#      uses: actions/checkout@v3
#    - name: Set up Python
#      uses: actions/setup-python@v4
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install pytest # not using yet lint checker like ruff
#        pip install requests
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
##      # 3. run pytest tests and upload the results
#    - name: Test with pytest  # additionally use ruff or other lint checkers
#      run: |
#        cd pytest-code
#        pytest -v test_word.py > test_results.txt
#    - name: upload test results
#      if: always()  # always perform this step even if tests fail, to see results
#      uses: actions/upload-artifact@v3
#      with:
#        name: GH_test_results
#        path: pytest-code/test_results.txt
##      The following steps will only execute if tests succeeded
##      # 4. Push images to DockerHub
#  deploy:
#    - needs: test
#    - name: Set DATE
#      run: echo "DATE=$(date -I)" >> $GITHUB_ENV
#    - name: Log in to Docker Hub
#      uses: docker/login-action@v2
#      with:
#        username: ${{ secrets.DOCKER_COURSE_USERNAME }}
#        password: ${{ secrets.DOCKER_COURSE_PASSWORD }}
#    - name: push image with "latest" and date tags to DH
#      run: |
#        docker push ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2
#        docker tag ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2 \
#        ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2:${{ env.DATE }}
#        docker push \
#        ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2:${{ env.DATE }}