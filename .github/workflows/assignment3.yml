name: assignment3
on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: create log file
      run: echo $(date -Iminutes) > /tmp/log
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        tags: meal-svc:danny_yellin
        outputs: type=docker,dest=/tmp/image.tar
    - name: see if image.tar is in /tmp
      run: ls /tmp
    - name: update log file on success
      if: success()
      run: echo image successfully built >> /tmp/log
    - name: update log file on failure
      if: failure()
      run: echo image not able to be built  >> /tmp/log
    - name: Upload meal-svc image
      uses: actions/upload-artifact@v3
      with:
        name: myimage
        path: /tmp/image.tar
    - name: Upload log file (always, even on build failure)
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: log
        path: /tmp/log
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
#    # 1. download image and run it in a container
    - name: Download image artifact
      uses: actions/download-artifact@v3
      with:
        name: myimage
        path: /tmp   # this is directory to put artifact (image.tar)
    - name: Download log artifact
      uses: actions/download-artifact@v3
      with:
        name: log
        path: /tmp  # this is directory to put artifact (log)
    - name: list /tmp directory and cat log
      run: |
        ls /tmp
        cat /tmp/log
    - name: Load Docker images from previous workflows
      run: docker load --input /tmp/image.tar
#      run: docker load --input images/image.tar
    - name: check meal-svc:danny_yellin image is loaded
      run: docker image ls
    - name: run image in container
      run: docker run -d -p5000:5000 meal-svc:danny_yellin
    - name: print to log if container was successfully started
      if: success()
      run: echo Container up and running >> /tmp/log
    - name: print to log if container failed to launch
      if: failure()
      run: echo Container failed to run >> /tmp/log
    - name: Check container is running
      run: docker ps
#    # 2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using yet lint checker like ruff
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      # 3. run pytest tests and upload the results
    - name: Test with pytest  # additionally use ruff or other lint checkers
      run: |
        cd tests
        pytest -v assn3_tests.py > test_results.txt
    - name:
      if: success()
      run: echo tests succeeded >> /tmp/log
    - name:
      if: failure()
      run: echo tests failed >> /tmp/log
    - name: upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: assn3_test_results
        path: tests/test_results.txt
    - name: Upload log file (always, even on build failure)
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: log
        path: /tmp/log
#  deploy:
#    - needs: test
#    - name: Set DATE
#      run: echo "DATE=$(date -I)" >> $GITHUB_ENV
#    - name: Log in to Docker Hub
#      uses: docker/login-action@v2
#      with:
#        username: ${{ secrets.DOCKER_COURSE_USERNAME }}
#        password: ${{ secrets.DOCKER_COURSE_PASSWORD }}
#    - name: push image with "latest" and date tags to DH
#      run: |
#        docker push ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2
#        docker tag ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2 \
#        ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2:${{ env.DATE }}
#        docker push \
#        ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2:${{ env.DATE }}